version = "3.8.1"

align {
    multiline = true
    arrowEnumeratorGenerator = true
    preset = more
    stripMargin = yes
    tokens = [
        {code = "extends", owner = "Defn. (Class|Trait|Object) "}
        {code = "with", owner = "Defn. (Trait) "}
        {code = "//", owner = ".*"}
        {code = "{", owner = "Template"}
        {code = "}", owner = "Template"}
        {code = "%",owner = "â€¢*"}
        {code = "%%", owner = ".*"}
        {code = "%%%", owner = ".*"}
        {code = "<-", owner = "Enumerator.Generator"}
        {code = "->", owner = ".*"}
        {code = "=", owner = ".*"}
        {code = "=>", owner = ".*"}
        {code = ":", owner = ".*"}
    ]
}

assumeStandardLibraryStripMargin = no

danglingParentheses {
    exclude = []
}

docstrings {
    forceBlankLineBefore = no
    oneline = keep
    style = SpaceAsterisk
    wrap = no
}

fileOverride {
    "glob:**/*.sbt" {
        newlines {
            topLevelStatementBlankLines = [
                {
                    blanks {
                        afterAll = -1
                    }

                   minBreaks = 0
                }
            ]
        }
    }

    "glob:**/project/*.scala" {
        newlines {
            topLevelStatementBlankLines = [
                {
                    blanks {
                        afterAll = -1
                    }

                    minBreaks = 0
                }
            ]
        }

        runner {
            # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
            dialect = Scala213
        }
    }
}

includeNoParensInSelectChains = yes

indent {
    ctrlSite = 4
    caseSite = 5
    withSiteRelativeToExtends = 3
    commaSiteRelativeToExtends = 8
}

indentOperator {
    exemptScope = all
}

lineEndings = unix // must be LF to keep consistent with scalafix

maxColumn = 250

newlines {
    alwaysBeforeElseAfterCurlyIf = yes
    avoidInResultType = yes
    avoidForSimpleOverflow = [slc]
    beforeCurlyLambdaParams = multilineWithCaseOnly
    inInterpolation = avoid

    topLevelStatementBlankLines = [
        {
            blanks {
                beforeAll = 1,
                afterAll = 1,
                beforeEndMarker = -1
            }

            minBreaks = 0
        },
        {
            blanks {
                beforeAll = -1,
                before = 1,
                after = 1,
                afterAll = -1,
                beforeEndMarker = -1
            }

            minBreaks = 1
        }
    ]
}

rewrite {
    redundantBraces {
        ifElseExpressions = yes
    }

    rules = [
        PreferCurlyFors,
        RedundantBraces,
        RedundantParens,
        SortModifiers,
        Imports
    ]

    sortModifiers {
        order = [
            inline,
            final,
            sealed,
            abstract,
            override,
            implicit,
            private,
            protected,
            lazy,
            infix
        ]
    }

    trailingCommas {
        allonFolding = true
    }
}

runner {
    # https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects
    dialect = scala213
}

spaces {
    inImportCurlyBraces = yes
}

verticalMultiline {
    arityThreshold = 3
    atDefnSite = yes
    newlineAfterOpenParen = yes
}